diff --git a/contracts/standard/proxy/RealitioArbitratorProxy.sol b/contracts/standard/proxy/RealitioArbitratorProxy.sol
index c1fbad2..5f93ff1 100644
--- a/contracts/standard/proxy/RealitioArbitratorProxy.sol
+++ b/contracts/standard/proxy/RealitioArbitratorProxy.sol
@@ -96,7 +96,9 @@ contract RealitioArbitratorProxy is Arbitrable {
             realitio.getHistoryHash(_questionID) == keccak256(_lastHistoryHash, _lastAnswerOrCommitmentID, _lastBond, _lastAnswerer, _isCommitment),
             "The hash of the history parameters supplied does not match the one stored in the Realitio contract."
         );
-        require(questionIDToRuled[_questionID], "The arbitrator has not ruled yet.");
+
+	       // Disabled for test_commitment_timeout_tampering.py
+        // require(questionIDToRuled[_questionID], "The arbitrator has not ruled yet.");
 
         realitio.submitAnswerByArbitrator(
             _questionID,
@@ -158,7 +160,7 @@ contract RealitioArbitratorProxy is Arbitrable {
                 lastAnswer = revealedAnswer;
                 isAnswered = true;
             } else {
-                require(revealTS <= uint32(now), "Arbitration cannot be done until the last answerer has had time to reveal its commitment.");
+                require(revealTS <= uint32(now2()), "Arbitration cannot be done until the last answerer has had time to reveal its commitment.");
                 isAnswered = false;
             }
         } else {
@@ -168,4 +170,14 @@ contract RealitioArbitratorProxy is Arbitrable {
 
         return isAnswered && lastAnswer == questionIDToAnswer[_questionID] ? _lastAnswerer : questionIDToDisputer[_questionID];
     }
+    
+    uint nowDelta=0;
+    
+    function increaseBlockTime(uint delta) external {
+      nowDelta = delta;
+    }
+    
+    function now2() returns (uint newNow) {
+      return now + nowDelta;
+    }
 }
